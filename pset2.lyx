#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Buffalo Hird
\end_layout

\begin_layout Standard
CS124
\end_layout

\begin_layout Standard
Homework 2
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Problem 1:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Problem 2:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
We note that this problem is akin to finding the smallest path of a DAG
 
\begin_inset Formula $G-$
\end_inset

 where our original graph is 
\begin_inset Formula $G$
\end_inset

 and we find 
\begin_inset Formula $G-$
\end_inset

 by negating all edges of 
\begin_inset Formula $G$
\end_inset

.
 We discussed in class that Floyd Warshall can solve a shortest path in
 time 
\begin_inset Formula $O(n^{3})$
\end_inset

.
 However, this is slower than we desire and we will therefore devise a new
 method.
\end_layout

\begin_layout Standard
We discussed in class that we can get a topological list ordering of a graph
 by running DFS on the graph.
 This is computed in time 
\begin_inset Formula $O(|V|+|E|)$
\end_inset

 and we are sure of its correctness.
\end_layout

\begin_layout Standard
With this we can then iterate through this list in time 
\begin_inset Formula $O(|V|)$
\end_inset

 giving initial values 0 to each source and 
\begin_inset Formula $-\infty$
\end_inset

 to each non-source.
 These values represent the currently observed longest path to these nodes.
\end_layout

\begin_layout Standard
Proceeding this, we iterate (starting with the sources) through each node.
 For each node, we look at all outgoing edges, comparing the currently assigned
 longest path for each node with an incoming edge from the current node
 to the path of getting to the current node + the cost of travelling from
 the current node along the outgoing edge to the node said edge is incoming
 to.
 If for any of these succesive nodes the current cost + incoming edge cost
 is greater than its current longest path value, we assign its new longest
 path value to be this sum.
 So that we can retrieve our path after completing this search, we set the
 incoming node's parent to be our current node (essentially making a sort
 of doubly linking).
\end_layout

\begin_layout Standard
We repeat this process for each outgoing edge of a node and for each node
 through our topological list.
 Since our topological list contains all nodes and we look at all outgoing
 edges beginning with nodes with no incoming edges, we are guranteed to
 view each edge and vertex.
 This process therefore takes time 
\begin_inset Formula $O(|V|+|E|)$
\end_inset

.
\end_layout

\begin_layout Standard
Upon completing this, we can simply iterate through our topological list
 in time 
\begin_inset Formula $O(|V|)$
\end_inset

 and find the item with the highest maximum path value.
 Since we have iterated through each node topologically, we know this largest
 value in the list is the largest path value.
 Since we recorded each node's parent (item before it in the longest path),
 we can simply iterate through parents until reaching a source node.
 We record this path 
\begin_inset Formula $V_{n},V_{n-1},...,V_{k}$
\end_inset

 to get the shortest path 
\begin_inset Formula $V_{k},...,V_{n-1},V_{n}$
\end_inset

.
 Since there are no cycles there can be at most 
\begin_inset Formula $|V|$
\end_inset

 items in the path, so this process takes time 
\begin_inset Formula $O(|V|)$
\end_inset

.
 We then reverse this list to get the path from start to finish.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
We can see that this process misses a few cases.
 Namely: (i) when there are large magnitude negative values and (ii) when
 all values are negative.
\end_layout

\begin_layout Standard
We handle case (i) by
\end_layout

\begin_layout Standard
We can handle case (ii) easily by noting that if we return a negative longest
 path, negate all edges in the graph and then find the shortest path by
 the same method.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Problem 3:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Problem 4:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\end_body
\end_document
